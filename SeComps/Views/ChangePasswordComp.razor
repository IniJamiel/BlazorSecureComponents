@using Blazored.LocalStorage
@using CommonModelsLib
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorageService
@inject HttpClient Http
@attribute [Authorize]
@using Microsoft.AspNetCore.Components.Authorization
@using System.Net.Http.Json
@using System.Text.Json
@using SeComps.UtilLib
@using System.Net.Http.Headers

<CascadingAuthenticationState>
    <AuthorizeView>
        <Authorized>
            <PageTitle>@TitleText</PageTitle>
            <div class="@DivClass">
                <form id="Bawah">
                    <div class="form-outline mb-4">
                        <label class="form-label" for="Password">Password</label>
                        <input type="password" @bind="password"
                               id="Password" class="form-control"/>
                    </div>

                    <div class="form-outline mb-4">
                        <label class="form-label" for="PasswordConfirm">Confirm Password</label>
                        <input type="password" @bind="confirmPassword"
                               id="PasswordConfirm" class="form-control"/>
                    </div>
                    @if (weakPassVisible)
                    {
                        <p class="text-danger">*Password is too weak</p>
                    }
                    @if (confirmPassVisible)
                    {
                        <p class="text-danger">*Confirm Password does not match</p>
                    }
                    <button type="button" disabled="@weakPassVisible" @onclick="ChangePass" class="btn btn-primary w-100 btn-block mb-4">Confirm</button>
                </form>
            </div>
        </Authorized>
        <NotAuthorized>
            <RedirectToLogin />
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>
@code {
    [Parameter]
    public string DivClass { set; get; } = "";
    [Parameter]
    public string TitleText { set; get; } = "Change Password";

    private string password = "";
    private string confirmPassword = "";

    private bool weakPassVisible => UserBase.validatePassword(password);
    private bool confirmPassVisible = false;
    private async Task ChangePass()
    {
        var changeObj = new CommonModelsLib.ChangePassword();
        if (password != confirmPassword)
        {
            confirmPassVisible = true;
            return;
        }
        else
        {
            confirmPassVisible = false;
        }
        var jwtHandler = new JwtBearerTokenHandler(LocalStorageService);
        Http.addAuthHeader(LocalStorageService);
        changeObj.Email = await jwtHandler.GetEmail();
        changeObj.Password = password;
        var a = await Http.PostAsJsonAsync("api/ChangePassNoOTP", changeObj);
        bool verified = await JsonSerializer.DeserializeAsync<bool>(await a.Content.ReadAsStreamAsync());
        if (verified)
        {

        }
    }
}
