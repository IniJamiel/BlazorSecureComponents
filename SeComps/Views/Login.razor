@using System.Net.Http.Json
@using System.Text.Json
@inject HttpClient Http
@using CommonModelsLib 
@using SeComps.UtilLib
@inject NavigationManager NavigationManager

<div class = "@DivClass">
    <h2>
        @TitleText
    </h2>
    <form>
        @if(!passwordVerified){
        <div class="form-outline mb-4">
            <label class="form-label" for="form2Example1">Email address</label>
            <input type="email" @bind="ID" id="form2Example1" class="form-control"/>
        </div>
        <div class="form-outline mb-4">
            <label class="form-label" for="form2Example2">Password</label>
            <input type="password" @bind="Password" id="form2Example2" class="form-control"/>
        </div>
        <div class="row mb-4">

            <div class="col">
                <a href="@ForgotPasswordRef">Forgot password?</a>
            </div>
        </div>
        <!-- Submit button -->
            <button type="button" class="btn btn-primary w-100 btn-block mb-4" @onclick="login">Sign in</button>
            @if (passwordWrong)
            {
                <p class="text-danger">*Credential is Incorrect!</p>
            }
        }
        @if (!oTPVerified && passwordVerified)
        {
            <div class="form-outline mb-4">
                <label class="form-label" for="otp">Input The Code Sent to Your Email here</label>
                <div id="otp" class="inputs d-flex flex-row justify-content-center mt-2">
                    <input class="m-2 text-center form-control rounded" type="text" @bind="otp[0]" id="first" maxlength="1"/>
                    <input class="m-2 text-center form-control rounded" type="text" @bind="otp[1]" id="second" maxlength="1"/>
                    <input class="m-2 text-center form-control rounded" type="text" @bind="otp[2]" id="third" maxlength="1"/>
                    <input class="m-2 text-center form-control rounded" type="text" @bind="otp[3]" id="fourth" maxlength="1"/>
                    <input class="m-2 text-center form-control rounded" type="text" @bind="otp[4]" id="fifth" maxlength="1"/>
                    <input class="m-2 text-center form-control rounded" type="text" @bind="otp[5]" id="sixth" maxlength="1"/>
                </div>
            </div>
            @if (!otpVerif)
            {
                <p class="text-danger">*OTP is Wrong!</p>
            }
            <button type="button" class="btn btn-primary w-100 btn-block mb-4" @onclick="loginOTP">Sign in</button>
        }
    </form>
</div>
@code
{
    [Parameter]
    public string DivClass { set; get; } = "";
    [Parameter]
    public string TitleText { set; get; } = "Login";
    [Parameter]
    public string ForgotPasswordRef { set; get; } = "/ForgotPassword";
    [Parameter]
    public string RedirectSuccessLogin { set; get; } = "/todoList";

    private char[] otp = new char[6];
    private string stringOTP => new(otp);

    private bool otpVerif;
    private bool passwordWrong = false;

    private string ID = "";
    private string Password = "";
    private string PasswordEncrypted = "";

    [Parameter]
    public bool EnableOTP { set; get; } = true;

    private  SentLoginObject so = new ();

    private bool passwordVerified = false;
    private bool oTPVerified = false;
    private async Task login()
    {
        so.Password = Password;
        so.Id = ID;
        var response = await Http.PostAsJsonAsync("api/login", so);
        var a = await response.Content.ReadAsStringAsync();
        var options = new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            };
        UserBase? usera = string.IsNullOrEmpty(a) ? null : JsonSerializer.Deserialize<UserBase?>(a, options);
        if (usera != null)
        {
            passwordVerified = true;
            passwordWrong = false;
            await Http.PostAsJsonAsync("api/ReqOTP", usera.Username);
            StateManager.setActiveUserName(usera.Username);
            PasswordEncrypted = so.Password;
        }
        else
        {
            passwordVerified = false;
            passwordWrong = true;
        }
    }

    private async Task loginOTP()
    {
        var resetObj = new ResetObj();
        resetObj.email = StateManager.GetActiveUsername();
        resetObj.OTP = stringOTP;
        var a = await Http.PostAsJsonAsync("api/VerifOTPuName", resetObj);
        bool verified = otpVerif = await JsonSerializer.DeserializeAsync<bool>(await a.Content.ReadAsStreamAsync());
        if (verified)
        {
            var response = await Http.PostAsJsonAsync("api/login", so);
            
            UserBase? user = await JsonSerializer.DeserializeAsync<UserBase?>(await response.Content.ReadAsStreamAsync());
            if (user != null)
            {
                StateManager.setActiveUserBase(user);
                oTPVerified = true;
                NavigationManager.NavigateTo(RedirectSuccessLogin);
            }else
            {
                passwordVerified = false;
            }
        }
    }
}
